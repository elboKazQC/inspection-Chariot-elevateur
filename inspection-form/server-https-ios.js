// Serveur HTTPS minimal pour iOS - Compatible Express 5
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });
const express = require('express');
const cors = require('cors');
const https = require('https');
const selfsigned = require('selfsigned');
const os = require('os');
const fs = require('fs').promises;
const { sendInspectionAlert } = require('./emailService');

const app = express();
const PORT = process.env.PORT || 3001;
const HTTPS_PORT = process.env.HTTPS_PORT || 3443;

// Configuration CORS optimis√©e pour iOS
const corsOptions = {
    origin: function (origin, callback) {
        // Autoriser toutes les origines pour les tests iOS
        callback(null, true);
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: [
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'Accept',
        'Origin',
        'Access-Control-Request-Method',
        'Access-Control-Request-Headers'
    ],
    exposedHeaders: ['Content-Range', 'X-Content-Range'],
    maxAge: 86400 // 24 heures
};

app.use(cors(corsOptions));

// Middleware pour iOS
app.use((req, res, next) => {
    // Headers de s√©curit√© compatibles iOS
    res.setHeader('X-Frame-Options', 'SAMEORIGIN');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    
    // Headers HTTPS
    if (req.secure || req.headers['x-forwarded-proto'] === 'https') {
        res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
    }
    
    next();
});

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Middleware de diagnostic iOS int√©gr√©
app.use((req, res, next) => {
    const isIOS = /iPad|iPhone|iPod/.test(req.get('User-Agent') || '');
    
    if (isIOS && req.method === 'POST' && req.url === '/api/save') {
        console.log('\nüîç === DIAGNOSTIC iOS STRING MISMATCH ===');
        console.log('üì± Device:', req.get('User-Agent'));
        console.log('üïê Timestamp:', new Date().toISOString());
        console.log('üì° Protocol:', req.protocol, '| Secure:', req.secure);
        console.log('üìè Content-Length:', req.get('Content-Length'));
        console.log('üî§ Content-Type:', req.get('Content-Type'));
    }
    
    next();
});

// Servir les fichiers statiques
app.use(express.static(path.join(__dirname, 'build')));

// Routes API
app.get('/api/test', (req, res) => {
    const userAgent = req.get('User-Agent') || '';
    const isIOS = /iPad|iPhone|iPod/.test(userAgent);
    const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
    
    res.json({ 
        success: true, 
        message: 'Serveur HTTPS iOS fonctionnel!',
        deviceInfo: {
            userAgent,
            isIOS,
            isSafari,
            timestamp: new Date().toISOString(),
            protocol: req.protocol,
            secure: req.secure
        }
    });
});

app.get('/api/network-info', (req, res) => {
    const networkInterfaces = os.networkInterfaces();
    const addresses = [];
    Object.keys(networkInterfaces).forEach(ifname => {
        networkInterfaces[ifname].forEach(iface => {
            if (iface.family === 'IPv4' && !iface.internal) {
                addresses.push(iface.address);
            }
        });
    });
    res.json({
        addresses,
        port: PORT,
        httpsPort: HTTPS_PORT,
        message: 'Serveur HTTPS iOS - Information r√©seau',
        protocol: 'HTTPS'
    });
});

app.get('/connection-info', (req, res) => {
    res.sendFile(path.join(__dirname, 'connection-info-https.html'));
});

// Endpoint de test pour iOS
app.post('/api/debug-ios', (req, res) => {
    console.log('\nüß™ === TEST ENDPOINT iOS ===');
    
    try {
        const data = req.body;
        console.log('‚úÖ Donn√©es re√ßues et pars√©es correctement');
        console.log('üìä Taille des donn√©es:', JSON.stringify(data).length, 'caract√®res');
        
        // Validation basique
        const requiredFields = ['date', 'operator'];
        const missingFields = requiredFields.filter(field => !data[field]);
        
        if (missingFields.length > 0) {
            console.log('‚ö†Ô∏è Champs manquants:', missingFields.join(', '));
        }
        
        // Test de re-s√©rialisation
        const reserialized = JSON.stringify(data);
        console.log('‚úÖ Re-s√©rialisation r√©ussie');
        
        res.json({
            success: true,
            message: 'Test iOS r√©ussi - aucun string mismatch d√©tect√©',
            dataSize: reserialized.length,
            missingFields,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Erreur dans test endpoint:', error);
        res.status(500).json({
            success: false,
            error: error.message,
            type: 'iOS String Mismatch Test Error'
        });
    }
});

// Routes d'API existantes
app.post('/api/save', async (req, res) => {
    console.log('üî• Requ√™te de sauvegarde re√ßue depuis iOS (HTTPS)');
    console.log('üì± User-Agent:', req.get('User-Agent'));
    console.log('üîç Content-Type:', req.get('Content-Type'));
    console.log('üìä Body Size:', JSON.stringify(req.body).length, 'caract√®res');
    
    try {
        const formData = req.body;
        
        // Validation d√©taill√©e pour iOS
        if (!formData || typeof formData !== 'object') {
            console.error('‚ùå iOS Erreur: Donn√©es invalides re√ßues');
            return res.status(400).json({ 
                success: false, 
                message: 'Donn√©es invalides re√ßues',
                debug: { bodyType: typeof formData, hasBody: !!formData }
            });
        }
        
        // Logging d√©taill√© pour debug iOS
        console.log('üìã Donn√©es re√ßues:');
        console.log('  - Date:', formData.date);
        console.log('  - Op√©rateur:', formData.operator);
        console.log('  - Num√©ro chariot:', formData.truckNumber);
        console.log('  - Signature pr√©sente:', !!formData.signature);
        console.log('  - Visual inspection:', !!formData.visualInspection);
        console.log('  - Operational inspection:', !!formData.operationalInspection);
        
        const fileName = `inspection_${new Date().toISOString().replace(/[:.]/g, '-')}.json`;

        // Utiliser le chemin de sauvegarde
        let SAVE_PATH = 'C:\\Users\\vcasaubon.NOOVELIA\\Noovelia\\!SST - General\\Inspection chariot √©l√©vateur\\Fiche inspection app';
        const FALLBACK_PATH = path.join(os.homedir(), 'ForkliftInspections');
        
        try {
            await fs.access(SAVE_PATH);
            console.log('‚úÖ Chemin principal accessible');
        } catch (err) {
            console.log('üìÅ Utilisation du chemin alternatif:', FALLBACK_PATH);
            SAVE_PATH = FALLBACK_PATH;
        }

        const fullPath = path.join(SAVE_PATH, fileName);
        console.log('üíæ Sauvegarde dans:', fullPath);
        
        // Cr√©er le dossier si n√©cessaire
        await fs.mkdir(SAVE_PATH, { recursive: true });
        
        // Validation de string mismatch sp√©cifique iOS
        try {
            const jsonString = JSON.stringify(formData, null, 2);
            console.log('‚úÖ S√©rialisation JSON r√©ussie, taille:', jsonString.length);
            
            await fs.writeFile(fullPath, jsonString, 'utf8');
            console.log('‚úÖ Fichier JSON sauvegard√© avec succ√®s');
        } catch (serializationError) {
            console.error('‚ùå Erreur de s√©rialisation JSON (iOS string mismatch):', serializationError);
            throw new Error(`Erreur de format de donn√©es: ${serializationError.message}`);
        }        // G√©n√©ration PDF
        try {
            console.log('üìÑ D√©but de la g√©n√©ration du PDF...');
            const { generatePDF } = require('./pdfGenerator');
            const pdfPath = fullPath.replace(/\.json$/, '.pdf');
            
            const pdfContent = await generatePDF(formData);
            if (!pdfContent) {
                throw new Error('Le contenu du PDF est vide');
            }
            
            await fs.writeFile(pdfPath, pdfContent, 'binary');
            console.log('‚úÖ PDF g√©n√©r√© et sauvegard√©:', pdfPath);
        } catch (pdfErr) {
            console.error('‚ö†Ô∏è Erreur PDF (non critique):', pdfErr.message);
            // Ne pas faire √©chouer la sauvegarde pour le PDF
        }

        // V√©rification et envoi d'email d'alerte
        try {
            console.log('üìß V√©rification des probl√®mes pour envoi d\'email...');
            const emailResult = await sendInspectionAlert(formData);

            if (emailResult.success && emailResult.issues > 0) {
                console.log(`‚úÖ Email d'alerte envoy√© avec succ√®s pour ${emailResult.issues} probl√®me(s)`);
            } else if (emailResult.issues === 0) {
                console.log('‚úÖ Aucun probl√®me d√©tect√© - pas d\'email envoy√©');
            } else {
                console.warn('‚ö†Ô∏è  √âchec de l\'envoi de l\'email d\'alerte:', emailResult.message);
            }
        } catch (emailErr) {
            console.error('‚ùå Erreur lors de l\'envoi de l\'email d\'alerte:', emailErr);
            // Ne pas faire √©chouer la sauvegarde si l'email √©choue
        }

        console.log('üéâ Sauvegarde iOS HTTPS r√©ussie!');
        res.json({ 
            success: true, 
            message: 'Inspection sauvegard√©e avec succ√®s (HTTPS)',
            filePath: fullPath,
            debug: {
                protocol: 'HTTPS',
                userAgent: req.get('User-Agent'),
                timestamp: new Date().toISOString()
            }
        });
        
    } catch (error) {
        console.error('üí• Erreur d√©taill√©e lors de la sauvegarde iOS:', error);
        console.error('üîç Stack trace:', error.stack);
        
        res.status(500).json({ 
            success: false, 
            message: `Erreur de sauvegarde: ${error.message}`,
            debug: {
                errorType: error.name,
                protocol: 'HTTPS',
                userAgent: req.get('User-Agent'),
                timestamp: new Date().toISOString()
            }
        });
    }
});

// Endpoint pour tester l'envoi d'emails
app.get('/api/test-email', async (req, res) => {
    try {
        console.log('üìß Test de la configuration email (HTTPS)...');

        // Cr√©er des donn√©es de test avec des probl√®mes
        const testData = {
            date: new Date().toISOString().split('T')[0],
            operator: 'Test Operator iOS',
            truckNumber: 'HTTPS-TEST-123',
            registration: 'REG-HTTPS',
            department: 'Test Department HTTPS',
            visualInspection: {
                alimentation: {
                    items: [
                        { isOk: 'ok', comments: 'Bon √©tat' },
                        { isOk: 'notOk', comments: 'Probl√®me de connexion d√©tect√© lors du test HTTPS' },
                        { isOk: 'ok', comments: '' }
                    ]
                }
            },
            operationalInspection: {
                freins: {
                    items: [
                        { isOk: 'notOk', comments: 'Freins inefficaces - test d\'alerte email HTTPS' },
                        { isOk: 'ok', comments: '' }
                    ]
                }
            }
        };

        const emailResult = await sendInspectionAlert(testData);

        res.json({
            success: emailResult.success,
            message: 'Test email HTTPS termin√©',
            details: emailResult,
            emailConfigured: !!(process.env.EMAIL_USER && process.env.EMAIL_PASS),
            protocol: 'HTTPS'
        });
    } catch (error) {
        console.error('‚ùå Erreur test email HTTPS:', error);
        res.status(500).json({
            success: false,
            error: error.message,
            emailConfigured: !!(process.env.EMAIL_USER && process.env.EMAIL_PASS),
            protocol: 'HTTPS'
        });
    }
});

// Route par d√©faut pour React - DOIT √äTRE EN DERNIER
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// D√©marrage du serveur HTTPS
async function startHTTPSServer() {
    try {
        console.log('üîí G√©n√©ration du certificat SSL pour iOS...');
        
        const attrs = [{ name: 'commonName', value: 'localhost' }];
        const pems = selfsigned.generate(attrs, { 
            keySize: 2048,
            days: 365,
            algorithm: 'sha256'
        });

        const httpsOptions = {
            key: pems.private,
            cert: pems.cert
        };

        const httpsServer = https.createServer(httpsOptions, app);
        
        httpsServer.listen(HTTPS_PORT, '0.0.0.0', () => {
            console.log('\nüöÄ Serveur HTTPS pour iOS d√©marr√©!');
            console.log(`üîí HTTPS: https://localhost:${HTTPS_PORT}`);
            
            // Afficher toutes les adresses IP disponibles
            const networkInterfaces = os.networkInterfaces();
            console.log('\nüì± Acc√®s depuis iOS:');
            Object.keys(networkInterfaces).forEach(ifname => {
                networkInterfaces[ifname].forEach(iface => {
                    if (iface.family === 'IPv4' && !iface.internal) {
                        console.log(`  üì± https://${iface.address}:${HTTPS_PORT}`);
                    }
                });
            });
            
            console.log('\nüîß Pages de diagnostic:');
            console.log(`  üíª https://localhost:${HTTPS_PORT}/connection-info`);
            console.log(`  üß™ https://localhost:${HTTPS_PORT}/api/test`);
            console.log('\n‚úÖ Optimis√© pour iPhone/iPad/iOS');
            console.log('‚ö†Ô∏è  Acceptez le certificat auto-sign√© sur votre appareil iOS');
        });

        httpsServer.on('error', (error) => {
            console.error('‚ùå Erreur serveur HTTPS:', error);
            throw error;
        });

    } catch (error) {
        console.error('‚ùå √âchec du d√©marrage HTTPS:', error);
        console.log('üîÑ Tentative de d√©marrage HTTP de secours...');
        
        app.listen(PORT, '0.0.0.0', () => {
            console.log(`‚ö†Ô∏è Serveur HTTP de secours sur le port ${PORT}`);
        });
    }
}

startHTTPSServer();
